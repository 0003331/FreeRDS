// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbRPC.proto

#ifndef PROTOBUF_pbRPC_2eproto__INCLUDED
#define PROTOBUF_pbRPC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace freeRDS {
namespace pbRPC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pbRPC_2eproto();
void protobuf_AssignDesc_pbRPC_2eproto();
void protobuf_ShutdownFile_pbRPC_2eproto();

class RPCBase;

enum RPCBase_RPCStatus {
  RPCBase_RPCStatus_SUCCESS = 0,
  RPCBase_RPCStatus_FAILED = 1,
  RPCBase_RPCStatus_NOTFOUND = 2
};
bool RPCBase_RPCStatus_IsValid(int value);
const RPCBase_RPCStatus RPCBase_RPCStatus_RPCStatus_MIN = RPCBase_RPCStatus_SUCCESS;
const RPCBase_RPCStatus RPCBase_RPCStatus_RPCStatus_MAX = RPCBase_RPCStatus_NOTFOUND;
const int RPCBase_RPCStatus_RPCStatus_ARRAYSIZE = RPCBase_RPCStatus_RPCStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPCBase_RPCStatus_descriptor();
inline const ::std::string& RPCBase_RPCStatus_Name(RPCBase_RPCStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPCBase_RPCStatus_descriptor(), value);
}
inline bool RPCBase_RPCStatus_Parse(
    const ::std::string& name, RPCBase_RPCStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCBase_RPCStatus>(
    RPCBase_RPCStatus_descriptor(), name, value);
}
// ===================================================================

class RPCBase : public ::google::protobuf::Message {
 public:
  RPCBase();
  virtual ~RPCBase();
  
  RPCBase(const RPCBase& from);
  
  inline RPCBase& operator=(const RPCBase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCBase& default_instance();
  
  void Swap(RPCBase* other);
  
  // implements Message ----------------------------------------------
  
  RPCBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCBase& from);
  void MergeFrom(const RPCBase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RPCBase_RPCStatus RPCStatus;
  static const RPCStatus SUCCESS = RPCBase_RPCStatus_SUCCESS;
  static const RPCStatus FAILED = RPCBase_RPCStatus_FAILED;
  static const RPCStatus NOTFOUND = RPCBase_RPCStatus_NOTFOUND;
  static inline bool RPCStatus_IsValid(int value) {
    return RPCBase_RPCStatus_IsValid(value);
  }
  static const RPCStatus RPCStatus_MIN =
    RPCBase_RPCStatus_RPCStatus_MIN;
  static const RPCStatus RPCStatus_MAX =
    RPCBase_RPCStatus_RPCStatus_MAX;
  static const int RPCStatus_ARRAYSIZE =
    RPCBase_RPCStatus_RPCStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RPCStatus_descriptor() {
    return RPCBase_RPCStatus_descriptor();
  }
  static inline const ::std::string& RPCStatus_Name(RPCStatus value) {
    return RPCBase_RPCStatus_Name(value);
  }
  static inline bool RPCStatus_Parse(const ::std::string& name,
      RPCStatus* value) {
    return RPCBase_RPCStatus_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 Tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);
  
  // required bool isResponse = 2 [default = false];
  inline bool has_isresponse() const;
  inline void clear_isresponse();
  static const int kIsResponseFieldNumber = 2;
  inline bool isresponse() const;
  inline void set_isresponse(bool value);
  
  // required .freeRDS.pbRPC.RPCBase.RPCStatus status = 3 [default = SUCCESS];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::freeRDS::pbRPC::RPCBase_RPCStatus status() const;
  inline void set_status(::freeRDS::pbRPC::RPCBase_RPCStatus value);
  
  // required uint32 msgType = 4;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint32 value);
  
  // required bytes payload = 5;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 5;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // @@protoc_insertion_point(class_scope:freeRDS.pbRPC.RPCBase)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_isresponse();
  inline void clear_has_isresponse();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_payload();
  inline void clear_has_payload();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 tag_;
  bool isresponse_;
  int status_;
  ::google::protobuf::uint32 msgtype_;
  ::std::string* payload_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pbRPC_2eproto();
  friend void protobuf_AssignDesc_pbRPC_2eproto();
  friend void protobuf_ShutdownFile_pbRPC_2eproto();
  
  void InitAsDefaultInstance();
  static RPCBase* default_instance_;
};
// ===================================================================


// ===================================================================

// RPCBase

// required uint32 Tag = 1;
inline bool RPCBase::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCBase::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCBase::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCBase::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 RPCBase::tag() const {
  return tag_;
}
inline void RPCBase::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// required bool isResponse = 2 [default = false];
inline bool RPCBase::has_isresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCBase::set_has_isresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCBase::clear_has_isresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCBase::clear_isresponse() {
  isresponse_ = false;
  clear_has_isresponse();
}
inline bool RPCBase::isresponse() const {
  return isresponse_;
}
inline void RPCBase::set_isresponse(bool value) {
  set_has_isresponse();
  isresponse_ = value;
}

// required .freeRDS.pbRPC.RPCBase.RPCStatus status = 3 [default = SUCCESS];
inline bool RPCBase::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPCBase::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPCBase::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPCBase::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::freeRDS::pbRPC::RPCBase_RPCStatus RPCBase::status() const {
  return static_cast< ::freeRDS::pbRPC::RPCBase_RPCStatus >(status_);
}
inline void RPCBase::set_status(::freeRDS::pbRPC::RPCBase_RPCStatus value) {
  GOOGLE_DCHECK(::freeRDS::pbRPC::RPCBase_RPCStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 msgType = 4;
inline bool RPCBase::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPCBase::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPCBase::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPCBase::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
inline ::google::protobuf::uint32 RPCBase::msgtype() const {
  return msgtype_;
}
inline void RPCBase::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// required bytes payload = 5;
inline bool RPCBase::has_payload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPCBase::set_has_payload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPCBase::clear_has_payload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPCBase::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& RPCBase::payload() const {
  return *payload_;
}
inline void RPCBase::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void RPCBase::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void RPCBase::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCBase::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* RPCBase::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbRPC
}  // namespace freeRDS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::freeRDS::pbRPC::RPCBase_RPCStatus>() {
  return ::freeRDS::pbRPC::RPCBase_RPCStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pbRPC_2eproto__INCLUDED
