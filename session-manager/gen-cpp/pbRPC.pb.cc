// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbRPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace freeRDS {
namespace pbRPC {

namespace {

const ::google::protobuf::Descriptor* RPCBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCBase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RPCBase_RPCStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pbRPC_2eproto() {
  protobuf_AddDesc_pbRPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pbRPC.proto");
  GOOGLE_CHECK(file != NULL);
  RPCBase_descriptor_ = file->message_type(0);
  static const int RPCBase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, isresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, payload_),
  };
  RPCBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCBase_descriptor_,
      RPCBase::default_instance_,
      RPCBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCBase));
  RPCBase_RPCStatus_descriptor_ = RPCBase_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pbRPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCBase_descriptor_, &RPCBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pbRPC_2eproto() {
  delete RPCBase::default_instance_;
  delete RPCBase_reflection_;
}

void protobuf_AddDesc_pbRPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013pbRPC.proto\022\rfreeRDS.pbRPC\"\302\001\n\007RPCBase"
    "\022\013\n\003Tag\030\001 \002(\r\022\031\n\nisResponse\030\002 \002(\010:\005false"
    "\0229\n\006status\030\003 \002(\0162 .freeRDS.pbRPC.RPCBase"
    ".RPCStatus:\007SUCCESS\022\017\n\007msgType\030\004 \002(\r\022\017\n\007"
    "payload\030\005 \002(\014\"2\n\tRPCStatus\022\013\n\007SUCCESS\020\000\022"
    "\n\n\006FAILED\020\001\022\014\n\010NOTFOUND\020\002", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pbRPC.proto", &protobuf_RegisterTypes);
  RPCBase::default_instance_ = new RPCBase();
  RPCBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pbRPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pbRPC_2eproto {
  StaticDescriptorInitializer_pbRPC_2eproto() {
    protobuf_AddDesc_pbRPC_2eproto();
  }
} static_descriptor_initializer_pbRPC_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* RPCBase_RPCStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCBase_RPCStatus_descriptor_;
}
bool RPCBase_RPCStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RPCBase_RPCStatus RPCBase::SUCCESS;
const RPCBase_RPCStatus RPCBase::FAILED;
const RPCBase_RPCStatus RPCBase::NOTFOUND;
const RPCBase_RPCStatus RPCBase::RPCStatus_MIN;
const RPCBase_RPCStatus RPCBase::RPCStatus_MAX;
const int RPCBase::RPCStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RPCBase::kTagFieldNumber;
const int RPCBase::kIsResponseFieldNumber;
const int RPCBase::kStatusFieldNumber;
const int RPCBase::kMsgTypeFieldNumber;
const int RPCBase::kPayloadFieldNumber;
#endif  // !_MSC_VER

RPCBase::RPCBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCBase::InitAsDefaultInstance() {
}

RPCBase::RPCBase(const RPCBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCBase::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  isresponse_ = false;
  status_ = 0;
  msgtype_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCBase::~RPCBase() {
  SharedDtor();
}

void RPCBase::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void RPCBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCBase_descriptor_;
}

const RPCBase& RPCBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbRPC_2eproto();  return *default_instance_;
}

RPCBase* RPCBase::default_instance_ = NULL;

RPCBase* RPCBase::New() const {
  return new RPCBase;
}

void RPCBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
    isresponse_ = false;
    status_ = 0;
    msgtype_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isResponse;
        break;
      }
      
      // required bool isResponse = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isResponse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isresponse_)));
          set_has_isresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required .freeRDS.pbRPC.RPCBase.RPCStatus status = 3 [default = SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::freeRDS::pbRPC::RPCBase_RPCStatus_IsValid(value)) {
            set_status(static_cast< ::freeRDS::pbRPC::RPCBase_RPCStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgType;
        break;
      }
      
      // required uint32 msgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }
  
  // required bool isResponse = 2 [default = false];
  if (has_isresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isresponse(), output);
  }
  
  // required .freeRDS.pbRPC.RPCBase.RPCStatus status = 3 [default = SUCCESS];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }
  
  // required uint32 msgType = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtype(), output);
  }
  
  // required bytes payload = 5;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }
  
  // required bool isResponse = 2 [default = false];
  if (has_isresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isresponse(), target);
  }
  
  // required .freeRDS.pbRPC.RPCBase.RPCStatus status = 3 [default = SUCCESS];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }
  
  // required uint32 msgType = 4;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtype(), target);
  }
  
  // required bytes payload = 5;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }
    
    // required bool isResponse = 2 [default = false];
    if (has_isresponse()) {
      total_size += 1 + 1;
    }
    
    // required .freeRDS.pbRPC.RPCBase.RPCStatus status = 3 [default = SUCCESS];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required uint32 msgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }
    
    // required bytes payload = 5;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCBase::MergeFrom(const RPCBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_isresponse()) {
      set_isresponse(from.isresponse());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCBase::CopyFrom(const RPCBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RPCBase::Swap(RPCBase* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(isresponse_, other->isresponse_);
    std::swap(status_, other->status_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCBase_descriptor_;
  metadata.reflection = RPCBase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbRPC
}  // namespace freeRDS

// @@protoc_insertion_point(global_scope)
