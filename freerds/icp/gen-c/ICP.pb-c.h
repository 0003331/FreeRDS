/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_ICP_2eproto__INCLUDED
#define PROTOBUF_C_ICP_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Freerds__Icp__IsChannelAllowedRequest Freerds__Icp__IsChannelAllowedRequest;
typedef struct _Freerds__Icp__IsChannelAllowedResponse Freerds__Icp__IsChannelAllowedResponse;
typedef struct _Freerds__Icp__PingRequest Freerds__Icp__PingRequest;
typedef struct _Freerds__Icp__PingResponse Freerds__Icp__PingResponse;


/* --- enums --- */

typedef enum _Freerds__Icp__MSGTYPE {
  FREERDS__ICP__MSGTYPE__IsChannelAllowed = 1,
  FREERDS__ICP__MSGTYPE__Ping = 2
} Freerds__Icp__MSGTYPE;

/* --- messages --- */

struct  _Freerds__Icp__IsChannelAllowedRequest
{
  ProtobufCMessage base;
  char *channelname;
};
#define FREERDS__ICP__IS_CHANNEL_ALLOWED_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&freerds__icp__is_channel_allowed_request__descriptor) \
    , NULL }


struct  _Freerds__Icp__IsChannelAllowedResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean channelallowed;
};
#define FREERDS__ICP__IS_CHANNEL_ALLOWED_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&freerds__icp__is_channel_allowed_response__descriptor) \
    , 0 }


struct  _Freerds__Icp__PingRequest
{
  ProtobufCMessage base;
};
#define FREERDS__ICP__PING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&freerds__icp__ping_request__descriptor) \
     }


struct  _Freerds__Icp__PingResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean pong;
};
#define FREERDS__ICP__PING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&freerds__icp__ping_response__descriptor) \
    , 0 }


/* Freerds__Icp__IsChannelAllowedRequest methods */
void   freerds__icp__is_channel_allowed_request__init
                     (Freerds__Icp__IsChannelAllowedRequest         *message);
size_t freerds__icp__is_channel_allowed_request__get_packed_size
                     (const Freerds__Icp__IsChannelAllowedRequest   *message);
size_t freerds__icp__is_channel_allowed_request__pack
                     (const Freerds__Icp__IsChannelAllowedRequest   *message,
                      uint8_t             *out);
size_t freerds__icp__is_channel_allowed_request__pack_to_buffer
                     (const Freerds__Icp__IsChannelAllowedRequest   *message,
                      ProtobufCBuffer     *buffer);
Freerds__Icp__IsChannelAllowedRequest *
       freerds__icp__is_channel_allowed_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   freerds__icp__is_channel_allowed_request__free_unpacked
                     (Freerds__Icp__IsChannelAllowedRequest *message,
                      ProtobufCAllocator *allocator);
/* Freerds__Icp__IsChannelAllowedResponse methods */
void   freerds__icp__is_channel_allowed_response__init
                     (Freerds__Icp__IsChannelAllowedResponse         *message);
size_t freerds__icp__is_channel_allowed_response__get_packed_size
                     (const Freerds__Icp__IsChannelAllowedResponse   *message);
size_t freerds__icp__is_channel_allowed_response__pack
                     (const Freerds__Icp__IsChannelAllowedResponse   *message,
                      uint8_t             *out);
size_t freerds__icp__is_channel_allowed_response__pack_to_buffer
                     (const Freerds__Icp__IsChannelAllowedResponse   *message,
                      ProtobufCBuffer     *buffer);
Freerds__Icp__IsChannelAllowedResponse *
       freerds__icp__is_channel_allowed_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   freerds__icp__is_channel_allowed_response__free_unpacked
                     (Freerds__Icp__IsChannelAllowedResponse *message,
                      ProtobufCAllocator *allocator);
/* Freerds__Icp__PingRequest methods */
void   freerds__icp__ping_request__init
                     (Freerds__Icp__PingRequest         *message);
size_t freerds__icp__ping_request__get_packed_size
                     (const Freerds__Icp__PingRequest   *message);
size_t freerds__icp__ping_request__pack
                     (const Freerds__Icp__PingRequest   *message,
                      uint8_t             *out);
size_t freerds__icp__ping_request__pack_to_buffer
                     (const Freerds__Icp__PingRequest   *message,
                      ProtobufCBuffer     *buffer);
Freerds__Icp__PingRequest *
       freerds__icp__ping_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   freerds__icp__ping_request__free_unpacked
                     (Freerds__Icp__PingRequest *message,
                      ProtobufCAllocator *allocator);
/* Freerds__Icp__PingResponse methods */
void   freerds__icp__ping_response__init
                     (Freerds__Icp__PingResponse         *message);
size_t freerds__icp__ping_response__get_packed_size
                     (const Freerds__Icp__PingResponse   *message);
size_t freerds__icp__ping_response__pack
                     (const Freerds__Icp__PingResponse   *message,
                      uint8_t             *out);
size_t freerds__icp__ping_response__pack_to_buffer
                     (const Freerds__Icp__PingResponse   *message,
                      ProtobufCBuffer     *buffer);
Freerds__Icp__PingResponse *
       freerds__icp__ping_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   freerds__icp__ping_response__free_unpacked
                     (Freerds__Icp__PingResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Freerds__Icp__IsChannelAllowedRequest_Closure)
                 (const Freerds__Icp__IsChannelAllowedRequest *message,
                  void *closure_data);
typedef void (*Freerds__Icp__IsChannelAllowedResponse_Closure)
                 (const Freerds__Icp__IsChannelAllowedResponse *message,
                  void *closure_data);
typedef void (*Freerds__Icp__PingRequest_Closure)
                 (const Freerds__Icp__PingRequest *message,
                  void *closure_data);
typedef void (*Freerds__Icp__PingResponse_Closure)
                 (const Freerds__Icp__PingResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    freerds__icp__msgtype__descriptor;
extern const ProtobufCMessageDescriptor freerds__icp__is_channel_allowed_request__descriptor;
extern const ProtobufCMessageDescriptor freerds__icp__is_channel_allowed_response__descriptor;
extern const ProtobufCMessageDescriptor freerds__icp__ping_request__descriptor;
extern const ProtobufCMessageDescriptor freerds__icp__ping_response__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_ICP_2eproto__INCLUDED */
